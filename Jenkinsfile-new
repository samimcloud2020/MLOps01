pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIAL_ID = 'mlops-jenkins-dockerhub-token'
        DOCKERHUB_REGISTRY = 'https://registry.hub.docker.com'
        DOCKERHUB_REPOSITORY = 'samimbsnl/mlops'
    }
    stages {

        stage('Clone Repository') {
            steps {
                script {
                    echo 'üì• Cloning GitHub Repository...'
                    checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'mlops-git-token', url: 'https://github.com/iQuantC/MLOps01.git']])
                }
            }
        }

        stage('Lint Code') {
            steps {
                script {
                    echo 'üîç Linting Python Code...'
                    sh '''
                        python3 -m pip install --upgrade pip --break-system-packages
                        pip install -r requirements.txt pylint flake8 black

                        pylint app.py train.py --output=pylint-report.txt --exit-zero
                        flake8 app.py train.py --ignore=E501,E302 --output-file=flake8-report.txt
                        black app.py train.py
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/*lint-report.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Test Code') {
            steps {
                script {
                    echo 'üß™ Testing Python Code...'
                    sh '''
                        pip install pytest
                        pytest --junitxml=pytest-report.xml tests/
                    '''
                }
            }
            post {
                always {
                    junit 'pytest-report.xml'
                }
            }
        }

        stage('Trivy FS Scan') {
            steps {
                script {
                    echo 'üîç Trivy FS scan...'
                    sh "trivy fs ./ --format table -o trivy-fs-report.html || echo 'Trivy scan failed but continuing...'"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-fs-report.html', allowEmptyArchive: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'üê≥ Building Docker Image...'
                    sh '''
                        echo "Checking Docker..."
                        command -v docker || (echo "‚ùå Docker CLI not found" && exit 1)
                        docker info || (echo "‚ùå Cannot connect to Docker daemon" && exit 1)
                        test -f Dockerfile || (echo "‚ùå Dockerfile missing!" && exit 1)

                        echo "üõ†Ô∏è Building image..."
                        docker build -t ${DOCKERHUB_REPOSITORY}:latest .
                    '''
                }
            }
        }

        stage('Trivy Docker Image Scan') {
            steps {
                script {
                    echo 'üõ°Ô∏è Scanning Docker Image with Trivy...'
                    sh "trivy image ${DOCKERHUB_REPOSITORY}:latest --format table -o trivy-image-report.html || echo 'Trivy image scan failed but continuing...'"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-image-report.html', allowEmptyArchive: true
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo 'üì§ Pushing Docker Image to DockerHub...'
                    docker.withRegistry("${DOCKERHUB_REGISTRY}", "${DOCKERHUB_CREDENTIAL_ID}") {
                        sh "docker push ${DOCKERHUB_REPOSITORY}:latest"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo 'üöÄ Deploying to ECS...'
                    sh "aws ecs update-service --cluster iquant-ecs --service iquant-ecs-svc --force-new-deployment"
                }
            }
        }
    }

    post {
        failure {
            echo '‚ùå Pipeline failed. Please check logs above.'
        }
        success {
            echo '‚úÖ Pipeline completed successfully.'
        }
    }
}
